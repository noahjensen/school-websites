//  SASS Mixins & Extend & Placeholder Selectors

@mixin first-font-family {
  font-family: "Open Sans", sans-serif;
  font-weight: 400;
}
@mixin second-font-family {
  font-family: "Open Sans", sans-serif;
  font-weight: 700;
}
@mixin third-font-family {
  font-family: "Open Sans", sans-serif;
  font-weight: 600;
}

// Clearfix
// ----------------------------------

.clearfix {
  &:after {
    content: "";
    display: table;
    clear  : both;
  }
}

@mixin hidden {
  display   : none;
  visibility: hidden;
}

%hidden-text {
  border  : 0;
  clip    : rect(0 0 0 0);
  height  : 1px;
  margin  : -1px;
  overflow: hidden;
  padding : 0;
  position: absolute;
  width   : 1px;
}

// Center-align a block level element
// ----------------------------------
%center-block {
  display     : block;
  margin-left : auto;
  margin-right: auto;
}

%vertical-align {
  position         : absolute;
  top              : 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform    : translateY(-50%);
  transform        : translateY(-50%);
}

%horizontal-align {
  position         : absolute;
  left             : 50%;
  -webkit-transform: translateX(-50%);
  -ms-transform    : translateX(-50%);
  transform        : translateX(-50%);
}
//*//////////////*/
//*//// REMS ////*/
//*//////////////*/

@mixin font-size($fontPx) {
  font-size: 1px * $fontPx;
  font-size: 1rem * ($fontPx/10);
}
@mixin line-height($lhPx) {
  line-height: 1px * $lhPx;
  line-height: 1rem * ($lhPx/10);
}
// px too vw
@function get-vw($target) {
  $vw-context: (1920*.01) * 1px;
  @return ($target/$vw-context) * 1vw;
}

@mixin border-radius ($radius: 5px) {
  -webkit-border-radius  : $radius;
  -moz-border-radius     : $radius;
  border-radius          : $radius;

  -moz-background-clip   : padding;
  -webkit-background-clip: padding-box;
  background-clip        : padding-box;
}
@mixin transition ($property: all, $duration: 0.5s) {
  -webkit-transition: $property $duration ease-in-out;
  -moz-transition   : $property $duration ease-in-out;
  -o-transition     : $property $duration ease-in-out;
  transition        : $property $duration ease-in-out;
}

@mixin responsive-property($property, $CSSvalue, $min, $max: false) {
  $CSSvalue2          : get-vw($CSSvalue);
  $responsive-unitless: $CSSvalue2 / ($CSSvalue2 - $CSSvalue2 + 1);
  $dimension          : if(unit($CSSvalue2)=='vh', 'height', 'width');
  $min-breakpoint     : $min / $responsive-unitless * 100;
  @media (max-#{$dimension}: #{$min-breakpoint}) {
    #{$property}: $min;
  }
  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      #{$property}: $max;
    }
  }
  $fallback           : $CSSvalue+px;
  #{$property}        : $fallback;
  #{$property}        : $CSSvalue2;
}
